# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from event_syn/EventBase.msg. Do not edit."""
import codecs
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct

import genpy
import geometry_msgs.msg

class EventBase(genpy.Message):
  _md5sum = "0fd9c6075ee389ae992199348b844526"
  _type = "event_syn/EventBase"
  _has_header = False  # flag to mark the presence of a Header object
  _full_text = """int64 ID
string source
time begintime
time endtime
geometry_msgs/Point startPoint
geometry_msgs/Point endPoint
================================================================================
MSG: geometry_msgs/Point
# This contains the position of a point in free space
float64 x
float64 y
float64 z
"""
  __slots__ = ['ID','source','begintime','endtime','startPoint','endPoint']
  _slot_types = ['int64','string','time','time','geometry_msgs/Point','geometry_msgs/Point']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       ID,source,begintime,endtime,startPoint,endPoint

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(EventBase, self).__init__(*args, **kwds)
      # message fields cannot be None, assign default values for those that are
      if self.ID is None:
        self.ID = 0
      if self.source is None:
        self.source = ''
      if self.begintime is None:
        self.begintime = genpy.Time()
      if self.endtime is None:
        self.endtime = genpy.Time()
      if self.startPoint is None:
        self.startPoint = geometry_msgs.msg.Point()
      if self.endPoint is None:
        self.endPoint = geometry_msgs.msg.Point()
    else:
      self.ID = 0
      self.source = ''
      self.begintime = genpy.Time()
      self.endtime = genpy.Time()
      self.startPoint = geometry_msgs.msg.Point()
      self.endPoint = geometry_msgs.msg.Point()

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self.ID
      buff.write(_get_struct_q().pack(_x))
      _x = self.source
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self
      buff.write(_get_struct_4I6d().pack(_x.begintime.secs, _x.begintime.nsecs, _x.endtime.secs, _x.endtime.nsecs, _x.startPoint.x, _x.startPoint.y, _x.startPoint.z, _x.endPoint.x, _x.endPoint.y, _x.endPoint.z))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      if self.begintime is None:
        self.begintime = genpy.Time()
      if self.endtime is None:
        self.endtime = genpy.Time()
      if self.startPoint is None:
        self.startPoint = geometry_msgs.msg.Point()
      if self.endPoint is None:
        self.endPoint = geometry_msgs.msg.Point()
      end = 0
      start = end
      end += 8
      (self.ID,) = _get_struct_q().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.source = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.source = str[start:end]
      _x = self
      start = end
      end += 64
      (_x.begintime.secs, _x.begintime.nsecs, _x.endtime.secs, _x.endtime.nsecs, _x.startPoint.x, _x.startPoint.y, _x.startPoint.z, _x.endPoint.x, _x.endPoint.y, _x.endPoint.z,) = _get_struct_4I6d().unpack(str[start:end])
      self.begintime.canon()
      self.endtime.canon()
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self.ID
      buff.write(_get_struct_q().pack(_x))
      _x = self.source
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self
      buff.write(_get_struct_4I6d().pack(_x.begintime.secs, _x.begintime.nsecs, _x.endtime.secs, _x.endtime.nsecs, _x.startPoint.x, _x.startPoint.y, _x.startPoint.z, _x.endPoint.x, _x.endPoint.y, _x.endPoint.z))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      if self.begintime is None:
        self.begintime = genpy.Time()
      if self.endtime is None:
        self.endtime = genpy.Time()
      if self.startPoint is None:
        self.startPoint = geometry_msgs.msg.Point()
      if self.endPoint is None:
        self.endPoint = geometry_msgs.msg.Point()
      end = 0
      start = end
      end += 8
      (self.ID,) = _get_struct_q().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.source = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.source = str[start:end]
      _x = self
      start = end
      end += 64
      (_x.begintime.secs, _x.begintime.nsecs, _x.endtime.secs, _x.endtime.nsecs, _x.startPoint.x, _x.startPoint.y, _x.startPoint.z, _x.endPoint.x, _x.endPoint.y, _x.endPoint.z,) = _get_struct_4I6d().unpack(str[start:end])
      self.begintime.canon()
      self.endtime.canon()
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_4I6d = None
def _get_struct_4I6d():
    global _struct_4I6d
    if _struct_4I6d is None:
        _struct_4I6d = struct.Struct("<4I6d")
    return _struct_4I6d
_struct_q = None
def _get_struct_q():
    global _struct_q
    if _struct_q is None:
        _struct_q = struct.Struct("<q")
    return _struct_q
