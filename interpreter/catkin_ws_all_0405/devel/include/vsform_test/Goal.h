// Generated by gencpp from file vsform_test/Goal.msg
// DO NOT EDIT!


#ifndef VSFORM_TEST_MESSAGE_GOAL_H
#define VSFORM_TEST_MESSAGE_GOAL_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <geometry_msgs/Point32.h>
#include <geometry_msgs/Point32.h>

namespace vsform_test
{
template <class ContainerAllocator>
struct Goal_
{
  typedef Goal_<ContainerAllocator> Type;

  Goal_()
    : frame_pos()
    , frame_vel()
    , path_width(0.0)  {
    }
  Goal_(const ContainerAllocator& _alloc)
    : frame_pos(_alloc)
    , frame_vel(_alloc)
    , path_width(0.0)  {
  (void)_alloc;
    }



   typedef  ::geometry_msgs::Point32_<ContainerAllocator>  _frame_pos_type;
  _frame_pos_type frame_pos;

   typedef  ::geometry_msgs::Point32_<ContainerAllocator>  _frame_vel_type;
  _frame_vel_type frame_vel;

   typedef float _path_width_type;
  _path_width_type path_width;





  typedef boost::shared_ptr< ::vsform_test::Goal_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::vsform_test::Goal_<ContainerAllocator> const> ConstPtr;

}; // struct Goal_

typedef ::vsform_test::Goal_<std::allocator<void> > Goal;

typedef boost::shared_ptr< ::vsform_test::Goal > GoalPtr;
typedef boost::shared_ptr< ::vsform_test::Goal const> GoalConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::vsform_test::Goal_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::vsform_test::Goal_<ContainerAllocator> >::stream(s, "", v);
return s;
}

} // namespace vsform_test

namespace ros
{
namespace message_traits
{



// BOOLTRAITS {'IsFixedSize': True, 'IsMessage': True, 'HasHeader': False}
// {'geometry_msgs': ['/opt/ros/kinetic/share/geometry_msgs/cmake/../msg'], 'std_msgs': ['/opt/ros/kinetic/share/std_msgs/cmake/../msg'], 'vsform_test': ['/home/cps/catkin_ws_all_0405/src/gml_verify/application/vsform_test/msg']}

// !!!!!!!!!!! ['__class__', '__delattr__', '__dict__', '__doc__', '__eq__', '__format__', '__getattribute__', '__hash__', '__init__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', '_parsed_fields', 'constants', 'fields', 'full_name', 'has_header', 'header_present', 'names', 'package', 'parsed_fields', 'short_name', 'text', 'types']




template <class ContainerAllocator>
struct IsFixedSize< ::vsform_test::Goal_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::vsform_test::Goal_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::vsform_test::Goal_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::vsform_test::Goal_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::vsform_test::Goal_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::vsform_test::Goal_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::vsform_test::Goal_<ContainerAllocator> >
{
  static const char* value()
  {
    return "b0c8263c41fcbdd38a6148d2ecdf8e38";
  }

  static const char* value(const ::vsform_test::Goal_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xb0c8263c41fcbdd3ULL;
  static const uint64_t static_value2 = 0x8a6148d2ecdf8e38ULL;
};

template<class ContainerAllocator>
struct DataType< ::vsform_test::Goal_<ContainerAllocator> >
{
  static const char* value()
  {
    return "vsform_test/Goal";
  }

  static const char* value(const ::vsform_test::Goal_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::vsform_test::Goal_<ContainerAllocator> >
{
  static const char* value()
  {
    return "geometry_msgs/Point32 frame_pos # frame position\n\
geometry_msgs/Point32 frame_vel # frame velocity\n\
float32 path_width # path width\n\
================================================================================\n\
MSG: geometry_msgs/Point32\n\
# This contains the position of a point in free space(with 32 bits of precision).\n\
# It is recommeded to use Point wherever possible instead of Point32.  \n\
# \n\
# This recommendation is to promote interoperability.  \n\
#\n\
# This message is designed to take up less space when sending\n\
# lots of points at once, as in the case of a PointCloud.  \n\
\n\
float32 x\n\
float32 y\n\
float32 z\n\
";
  }

  static const char* value(const ::vsform_test::Goal_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::vsform_test::Goal_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.frame_pos);
      stream.next(m.frame_vel);
      stream.next(m.path_width);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct Goal_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::vsform_test::Goal_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::vsform_test::Goal_<ContainerAllocator>& v)
  {
    s << indent << "frame_pos: ";
    s << std::endl;
    Printer< ::geometry_msgs::Point32_<ContainerAllocator> >::stream(s, indent + "  ", v.frame_pos);
    s << indent << "frame_vel: ";
    s << std::endl;
    Printer< ::geometry_msgs::Point32_<ContainerAllocator> >::stream(s, indent + "  ", v.frame_vel);
    s << indent << "path_width: ";
    Printer<float>::stream(s, indent + "  ", v.path_width);
  }
};

} // namespace message_operations
} // namespace ros

#endif // VSFORM_TEST_MESSAGE_GOAL_H
