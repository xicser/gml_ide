// Generated by gencpp from file event_syn/EventBase.msg
// DO NOT EDIT!


#ifndef EVENT_SYN_MESSAGE_EVENTBASE_H
#define EVENT_SYN_MESSAGE_EVENTBASE_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <geometry_msgs/Point.h>
#include <geometry_msgs/Point.h>

namespace event_syn
{
template <class ContainerAllocator>
struct EventBase_
{
  typedef EventBase_<ContainerAllocator> Type;

  EventBase_()
    : ID(0)
    , source()
    , begintime()
    , endtime()
    , startPoint()
    , endPoint()  {
    }
  EventBase_(const ContainerAllocator& _alloc)
    : ID(0)
    , source(_alloc)
    , begintime()
    , endtime()
    , startPoint(_alloc)
    , endPoint(_alloc)  {
  (void)_alloc;
    }



   typedef int64_t _ID_type;
  _ID_type ID;

   typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _source_type;
  _source_type source;

   typedef ros::Time _begintime_type;
  _begintime_type begintime;

   typedef ros::Time _endtime_type;
  _endtime_type endtime;

   typedef  ::geometry_msgs::Point_<ContainerAllocator>  _startPoint_type;
  _startPoint_type startPoint;

   typedef  ::geometry_msgs::Point_<ContainerAllocator>  _endPoint_type;
  _endPoint_type endPoint;





  typedef boost::shared_ptr< ::event_syn::EventBase_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::event_syn::EventBase_<ContainerAllocator> const> ConstPtr;

}; // struct EventBase_

typedef ::event_syn::EventBase_<std::allocator<void> > EventBase;

typedef boost::shared_ptr< ::event_syn::EventBase > EventBasePtr;
typedef boost::shared_ptr< ::event_syn::EventBase const> EventBaseConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::event_syn::EventBase_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::event_syn::EventBase_<ContainerAllocator> >::stream(s, "", v);
return s;
}

} // namespace event_syn

namespace ros
{
namespace message_traits
{



// BOOLTRAITS {'IsFixedSize': False, 'IsMessage': True, 'HasHeader': False}
// {'geometry_msgs': ['/opt/ros/kinetic/share/geometry_msgs/cmake/../msg'], 'std_msgs': ['/opt/ros/kinetic/share/std_msgs/cmake/../msg'], 'event_syn': ['/home/cps/catkin_ws_all_0405/src/gml_verify/application/event_syn/msg']}

// !!!!!!!!!!! ['__class__', '__delattr__', '__dict__', '__doc__', '__eq__', '__format__', '__getattribute__', '__hash__', '__init__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', '_parsed_fields', 'constants', 'fields', 'full_name', 'has_header', 'header_present', 'names', 'package', 'parsed_fields', 'short_name', 'text', 'types']




template <class ContainerAllocator>
struct IsFixedSize< ::event_syn::EventBase_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::event_syn::EventBase_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::event_syn::EventBase_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::event_syn::EventBase_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::event_syn::EventBase_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::event_syn::EventBase_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::event_syn::EventBase_<ContainerAllocator> >
{
  static const char* value()
  {
    return "0fd9c6075ee389ae992199348b844526";
  }

  static const char* value(const ::event_syn::EventBase_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x0fd9c6075ee389aeULL;
  static const uint64_t static_value2 = 0x992199348b844526ULL;
};

template<class ContainerAllocator>
struct DataType< ::event_syn::EventBase_<ContainerAllocator> >
{
  static const char* value()
  {
    return "event_syn/EventBase";
  }

  static const char* value(const ::event_syn::EventBase_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::event_syn::EventBase_<ContainerAllocator> >
{
  static const char* value()
  {
    return "int64 ID\n\
string source\n\
time begintime\n\
time endtime\n\
geometry_msgs/Point startPoint\n\
geometry_msgs/Point endPoint\n\
================================================================================\n\
MSG: geometry_msgs/Point\n\
# This contains the position of a point in free space\n\
float64 x\n\
float64 y\n\
float64 z\n\
";
  }

  static const char* value(const ::event_syn::EventBase_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::event_syn::EventBase_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.ID);
      stream.next(m.source);
      stream.next(m.begintime);
      stream.next(m.endtime);
      stream.next(m.startPoint);
      stream.next(m.endPoint);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct EventBase_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::event_syn::EventBase_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::event_syn::EventBase_<ContainerAllocator>& v)
  {
    s << indent << "ID: ";
    Printer<int64_t>::stream(s, indent + "  ", v.ID);
    s << indent << "source: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.source);
    s << indent << "begintime: ";
    Printer<ros::Time>::stream(s, indent + "  ", v.begintime);
    s << indent << "endtime: ";
    Printer<ros::Time>::stream(s, indent + "  ", v.endtime);
    s << indent << "startPoint: ";
    s << std::endl;
    Printer< ::geometry_msgs::Point_<ContainerAllocator> >::stream(s, indent + "  ", v.startPoint);
    s << indent << "endPoint: ";
    s << std::endl;
    Printer< ::geometry_msgs::Point_<ContainerAllocator> >::stream(s, indent + "  ", v.endPoint);
  }
};

} // namespace message_operations
} // namespace ros

#endif // EVENT_SYN_MESSAGE_EVENTBASE_H
