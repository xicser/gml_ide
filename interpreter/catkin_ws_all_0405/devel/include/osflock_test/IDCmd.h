// Generated by gencpp from file osflock_test/IDCmd.msg
// DO NOT EDIT!


#ifndef OSFLOCK_TEST_MESSAGE_IDCMD_H
#define OSFLOCK_TEST_MESSAGE_IDCMD_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace osflock_test
{
template <class ContainerAllocator>
struct IDCmd_
{
  typedef IDCmd_<ContainerAllocator> Type;

  IDCmd_()
    : id(0)
    , cmd()  {
    }
  IDCmd_(const ContainerAllocator& _alloc)
    : id(0)
    , cmd(_alloc)  {
  (void)_alloc;
    }



   typedef int8_t _id_type;
  _id_type id;

   typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _cmd_type;
  _cmd_type cmd;





  typedef boost::shared_ptr< ::osflock_test::IDCmd_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::osflock_test::IDCmd_<ContainerAllocator> const> ConstPtr;

}; // struct IDCmd_

typedef ::osflock_test::IDCmd_<std::allocator<void> > IDCmd;

typedef boost::shared_ptr< ::osflock_test::IDCmd > IDCmdPtr;
typedef boost::shared_ptr< ::osflock_test::IDCmd const> IDCmdConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::osflock_test::IDCmd_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::osflock_test::IDCmd_<ContainerAllocator> >::stream(s, "", v);
return s;
}

} // namespace osflock_test

namespace ros
{
namespace message_traits
{



// BOOLTRAITS {'IsFixedSize': False, 'IsMessage': True, 'HasHeader': False}
// {'std_msgs': ['/opt/ros/kinetic/share/std_msgs/cmake/../msg'], 'osflock_test': ['/home/cps/catkin_ws_all_0405/src/gml_verify/application/osflock_test/msg'], 'geometry_msgs': ['/opt/ros/kinetic/share/geometry_msgs/cmake/../msg']}

// !!!!!!!!!!! ['__class__', '__delattr__', '__dict__', '__doc__', '__eq__', '__format__', '__getattribute__', '__hash__', '__init__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', '_parsed_fields', 'constants', 'fields', 'full_name', 'has_header', 'header_present', 'names', 'package', 'parsed_fields', 'short_name', 'text', 'types']




template <class ContainerAllocator>
struct IsFixedSize< ::osflock_test::IDCmd_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::osflock_test::IDCmd_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::osflock_test::IDCmd_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::osflock_test::IDCmd_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::osflock_test::IDCmd_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::osflock_test::IDCmd_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::osflock_test::IDCmd_<ContainerAllocator> >
{
  static const char* value()
  {
    return "8de13cc4a5bfcc15ab1cf03b69806e36";
  }

  static const char* value(const ::osflock_test::IDCmd_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x8de13cc4a5bfcc15ULL;
  static const uint64_t static_value2 = 0xab1cf03b69806e36ULL;
};

template<class ContainerAllocator>
struct DataType< ::osflock_test::IDCmd_<ContainerAllocator> >
{
  static const char* value()
  {
    return "osflock_test/IDCmd";
  }

  static const char* value(const ::osflock_test::IDCmd_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::osflock_test::IDCmd_<ContainerAllocator> >
{
  static const char* value()
  {
    return "int8 id # agent id\n\
string cmd # agent command, include takeoff start land\n\
";
  }

  static const char* value(const ::osflock_test::IDCmd_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::osflock_test::IDCmd_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.id);
      stream.next(m.cmd);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct IDCmd_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::osflock_test::IDCmd_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::osflock_test::IDCmd_<ContainerAllocator>& v)
  {
    s << indent << "id: ";
    Printer<int8_t>::stream(s, indent + "  ", v.id);
    s << indent << "cmd: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.cmd);
  }
};

} // namespace message_operations
} // namespace ros

#endif // OSFLOCK_TEST_MESSAGE_IDCMD_H
