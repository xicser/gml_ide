// Generated by gencpp from file path_planning/PathResult.msg
// DO NOT EDIT!


#ifndef PATH_PLANNING_MESSAGE_PATHRESULT_H
#define PATH_PLANNING_MESSAGE_PATHRESULT_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <geometry_msgs/Point.h>

namespace path_planning
{
template <class ContainerAllocator>
struct PathResult_
{
  typedef PathResult_<ContainerAllocator> Type;

  PathResult_()
    : result()  {
    }
  PathResult_(const ContainerAllocator& _alloc)
    : result(_alloc)  {
  (void)_alloc;
    }



   typedef std::vector< ::geometry_msgs::Point_<ContainerAllocator> , typename ContainerAllocator::template rebind< ::geometry_msgs::Point_<ContainerAllocator> >::other >  _result_type;
  _result_type result;





  typedef boost::shared_ptr< ::path_planning::PathResult_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::path_planning::PathResult_<ContainerAllocator> const> ConstPtr;

}; // struct PathResult_

typedef ::path_planning::PathResult_<std::allocator<void> > PathResult;

typedef boost::shared_ptr< ::path_planning::PathResult > PathResultPtr;
typedef boost::shared_ptr< ::path_planning::PathResult const> PathResultConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::path_planning::PathResult_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::path_planning::PathResult_<ContainerAllocator> >::stream(s, "", v);
return s;
}

} // namespace path_planning

namespace ros
{
namespace message_traits
{



// BOOLTRAITS {'IsFixedSize': False, 'IsMessage': True, 'HasHeader': False}
// {'std_msgs': ['/opt/ros/kinetic/share/std_msgs/cmake/../msg'], 'geometry_msgs': ['/opt/ros/kinetic/share/geometry_msgs/cmake/../msg'], 'path_planning': ['/home/cps/catkin_ws_all_0405/src/gml_verify/application/path_planning/msg']}

// !!!!!!!!!!! ['__class__', '__delattr__', '__dict__', '__doc__', '__eq__', '__format__', '__getattribute__', '__hash__', '__init__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', '_parsed_fields', 'constants', 'fields', 'full_name', 'has_header', 'header_present', 'names', 'package', 'parsed_fields', 'short_name', 'text', 'types']




template <class ContainerAllocator>
struct IsFixedSize< ::path_planning::PathResult_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::path_planning::PathResult_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::path_planning::PathResult_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::path_planning::PathResult_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::path_planning::PathResult_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::path_planning::PathResult_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::path_planning::PathResult_<ContainerAllocator> >
{
  static const char* value()
  {
    return "5ac55cb602cab21c0a526eb965fe531a";
  }

  static const char* value(const ::path_planning::PathResult_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x5ac55cb602cab21cULL;
  static const uint64_t static_value2 = 0x0a526eb965fe531aULL;
};

template<class ContainerAllocator>
struct DataType< ::path_planning::PathResult_<ContainerAllocator> >
{
  static const char* value()
  {
    return "path_planning/PathResult";
  }

  static const char* value(const ::path_planning::PathResult_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::path_planning::PathResult_<ContainerAllocator> >
{
  static const char* value()
  {
    return "geometry_msgs/Point[] result\n\
================================================================================\n\
MSG: geometry_msgs/Point\n\
# This contains the position of a point in free space\n\
float64 x\n\
float64 y\n\
float64 z\n\
";
  }

  static const char* value(const ::path_planning::PathResult_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::path_planning::PathResult_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.result);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct PathResult_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::path_planning::PathResult_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::path_planning::PathResult_<ContainerAllocator>& v)
  {
    s << indent << "result[]" << std::endl;
    for (size_t i = 0; i < v.result.size(); ++i)
    {
      s << indent << "  result[" << i << "]: ";
      s << std::endl;
      s << indent;
      Printer< ::geometry_msgs::Point_<ContainerAllocator> >::stream(s, indent + "    ", v.result[i]);
    }
  }
};

} // namespace message_operations
} // namespace ros

#endif // PATH_PLANNING_MESSAGE_PATHRESULT_H
