// Generated by gencpp from file osflock_test/IDQP.msg
// DO NOT EDIT!


#ifndef OSFLOCK_TEST_MESSAGE_IDQP_H
#define OSFLOCK_TEST_MESSAGE_IDQP_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <geometry_msgs/Point32.h>
#include <geometry_msgs/Point32.h>

namespace osflock_test
{
template <class ContainerAllocator>
struct IDQP_
{
  typedef IDQP_<ContainerAllocator> Type;

  IDQP_()
    : id(0)
    , q()
    , p()  {
    }
  IDQP_(const ContainerAllocator& _alloc)
    : id(0)
    , q(_alloc)
    , p(_alloc)  {
  (void)_alloc;
    }



   typedef int8_t _id_type;
  _id_type id;

   typedef  ::geometry_msgs::Point32_<ContainerAllocator>  _q_type;
  _q_type q;

   typedef  ::geometry_msgs::Point32_<ContainerAllocator>  _p_type;
  _p_type p;





  typedef boost::shared_ptr< ::osflock_test::IDQP_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::osflock_test::IDQP_<ContainerAllocator> const> ConstPtr;

}; // struct IDQP_

typedef ::osflock_test::IDQP_<std::allocator<void> > IDQP;

typedef boost::shared_ptr< ::osflock_test::IDQP > IDQPPtr;
typedef boost::shared_ptr< ::osflock_test::IDQP const> IDQPConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::osflock_test::IDQP_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::osflock_test::IDQP_<ContainerAllocator> >::stream(s, "", v);
return s;
}

} // namespace osflock_test

namespace ros
{
namespace message_traits
{



// BOOLTRAITS {'IsFixedSize': True, 'IsMessage': True, 'HasHeader': False}
// {'std_msgs': ['/opt/ros/kinetic/share/std_msgs/cmake/../msg'], 'osflock_test': ['/home/cps/catkin_ws_all_0405/src/gml_verify/application/osflock_test/msg'], 'geometry_msgs': ['/opt/ros/kinetic/share/geometry_msgs/cmake/../msg']}

// !!!!!!!!!!! ['__class__', '__delattr__', '__dict__', '__doc__', '__eq__', '__format__', '__getattribute__', '__hash__', '__init__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', '_parsed_fields', 'constants', 'fields', 'full_name', 'has_header', 'header_present', 'names', 'package', 'parsed_fields', 'short_name', 'text', 'types']




template <class ContainerAllocator>
struct IsFixedSize< ::osflock_test::IDQP_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::osflock_test::IDQP_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::osflock_test::IDQP_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::osflock_test::IDQP_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::osflock_test::IDQP_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::osflock_test::IDQP_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::osflock_test::IDQP_<ContainerAllocator> >
{
  static const char* value()
  {
    return "de73cd8cc01a3a407b0a10781a1dd6a4";
  }

  static const char* value(const ::osflock_test::IDQP_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xde73cd8cc01a3a40ULL;
  static const uint64_t static_value2 = 0x7b0a10781a1dd6a4ULL;
};

template<class ContainerAllocator>
struct DataType< ::osflock_test::IDQP_<ContainerAllocator> >
{
  static const char* value()
  {
    return "osflock_test/IDQP";
  }

  static const char* value(const ::osflock_test::IDQP_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::osflock_test::IDQP_<ContainerAllocator> >
{
  static const char* value()
  {
    return "int8 id # agent id\n\
geometry_msgs/Point32 q # agent position\n\
geometry_msgs/Point32 p # agent velocity\n\
================================================================================\n\
MSG: geometry_msgs/Point32\n\
# This contains the position of a point in free space(with 32 bits of precision).\n\
# It is recommeded to use Point wherever possible instead of Point32.  \n\
# \n\
# This recommendation is to promote interoperability.  \n\
#\n\
# This message is designed to take up less space when sending\n\
# lots of points at once, as in the case of a PointCloud.  \n\
\n\
float32 x\n\
float32 y\n\
float32 z\n\
";
  }

  static const char* value(const ::osflock_test::IDQP_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::osflock_test::IDQP_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.id);
      stream.next(m.q);
      stream.next(m.p);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct IDQP_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::osflock_test::IDQP_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::osflock_test::IDQP_<ContainerAllocator>& v)
  {
    s << indent << "id: ";
    Printer<int8_t>::stream(s, indent + "  ", v.id);
    s << indent << "q: ";
    s << std::endl;
    Printer< ::geometry_msgs::Point32_<ContainerAllocator> >::stream(s, indent + "  ", v.q);
    s << indent << "p: ";
    s << std::endl;
    Printer< ::geometry_msgs::Point32_<ContainerAllocator> >::stream(s, indent + "  ", v.p);
  }
};

} // namespace message_operations
} // namespace ros

#endif // OSFLOCK_TEST_MESSAGE_IDQP_H
