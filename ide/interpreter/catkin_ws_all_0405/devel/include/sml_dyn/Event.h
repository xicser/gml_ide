// Generated by gencpp from file sml_dyn/Event.msg
// DO NOT EDIT!


#ifndef SML_DYN_MESSAGE_EVENT_H
#define SML_DYN_MESSAGE_EVENT_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <geometry_msgs/Point.h>
#include <geometry_msgs/Point.h>

namespace sml_dyn
{
template <class ContainerAllocator>
struct Event_
{
  typedef Event_<ContainerAllocator> Type;

  Event_()
    : id(0)
    , name()
    , prior(0)
    , time()
    , pos()
    , data()  {
    }
  Event_(const ContainerAllocator& _alloc)
    : id(0)
    , name(_alloc)
    , prior(0)
    , time()
    , pos(_alloc)
    , data(_alloc)  {
  (void)_alloc;
    }



   typedef uint64_t _id_type;
  _id_type id;

   typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _name_type;
  _name_type name;

   typedef uint8_t _prior_type;
  _prior_type prior;

   typedef ros::Time _time_type;
  _time_type time;

   typedef  ::geometry_msgs::Point_<ContainerAllocator>  _pos_type;
  _pos_type pos;

   typedef  ::geometry_msgs::Point_<ContainerAllocator>  _data_type;
  _data_type data;





  typedef boost::shared_ptr< ::sml_dyn::Event_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::sml_dyn::Event_<ContainerAllocator> const> ConstPtr;

}; // struct Event_

typedef ::sml_dyn::Event_<std::allocator<void> > Event;

typedef boost::shared_ptr< ::sml_dyn::Event > EventPtr;
typedef boost::shared_ptr< ::sml_dyn::Event const> EventConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::sml_dyn::Event_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::sml_dyn::Event_<ContainerAllocator> >::stream(s, "", v);
return s;
}

} // namespace sml_dyn

namespace ros
{
namespace message_traits
{



// BOOLTRAITS {'IsFixedSize': False, 'IsMessage': True, 'HasHeader': False}
// {'geometry_msgs': ['/opt/ros/kinetic/share/geometry_msgs/cmake/../msg'], 'std_msgs': ['/opt/ros/kinetic/share/std_msgs/cmake/../msg'], 'sml_dyn': ['/home/cps/catkin_ws_all_0405/src/gml_verify/application/sml_dyn/msg']}

// !!!!!!!!!!! ['__class__', '__delattr__', '__dict__', '__doc__', '__eq__', '__format__', '__getattribute__', '__hash__', '__init__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', '_parsed_fields', 'constants', 'fields', 'full_name', 'has_header', 'header_present', 'names', 'package', 'parsed_fields', 'short_name', 'text', 'types']




template <class ContainerAllocator>
struct IsFixedSize< ::sml_dyn::Event_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::sml_dyn::Event_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::sml_dyn::Event_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::sml_dyn::Event_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::sml_dyn::Event_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::sml_dyn::Event_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::sml_dyn::Event_<ContainerAllocator> >
{
  static const char* value()
  {
    return "22829605e857c5733b3d0b8eab5f82ce";
  }

  static const char* value(const ::sml_dyn::Event_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x22829605e857c573ULL;
  static const uint64_t static_value2 = 0x3b3d0b8eab5f82ceULL;
};

template<class ContainerAllocator>
struct DataType< ::sml_dyn::Event_<ContainerAllocator> >
{
  static const char* value()
  {
    return "sml_dyn/Event";
  }

  static const char* value(const ::sml_dyn::Event_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::sml_dyn::Event_<ContainerAllocator> >
{
  static const char* value()
  {
    return "uint64 id                  # 事件的标识\n\
string name                # 事件的名字\n\
uint8 prior                # 事件的优先级 默认为0 越大越优先\n\
time time                  # 事件的时间\n\
geometry_msgs/Point pos    # 事件的位置\n\
geometry_msgs/Point data   # 事件传输的数据\n\
================================================================================\n\
MSG: geometry_msgs/Point\n\
# This contains the position of a point in free space\n\
float64 x\n\
float64 y\n\
float64 z\n\
";
  }

  static const char* value(const ::sml_dyn::Event_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::sml_dyn::Event_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.id);
      stream.next(m.name);
      stream.next(m.prior);
      stream.next(m.time);
      stream.next(m.pos);
      stream.next(m.data);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct Event_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::sml_dyn::Event_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::sml_dyn::Event_<ContainerAllocator>& v)
  {
    s << indent << "id: ";
    Printer<uint64_t>::stream(s, indent + "  ", v.id);
    s << indent << "name: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.name);
    s << indent << "prior: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.prior);
    s << indent << "time: ";
    Printer<ros::Time>::stream(s, indent + "  ", v.time);
    s << indent << "pos: ";
    s << std::endl;
    Printer< ::geometry_msgs::Point_<ContainerAllocator> >::stream(s, indent + "  ", v.pos);
    s << indent << "data: ";
    s << std::endl;
    Printer< ::geometry_msgs::Point_<ContainerAllocator> >::stream(s, indent + "  ", v.data);
  }
};

} // namespace message_operations
} // namespace ros

#endif // SML_DYN_MESSAGE_EVENT_H
